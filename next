一番人気のreactフレームワーク

183
next.jsとは、reactのフレームワーク
reactはできることが多いが難しい複雑
それをやりやすくする
ゼロコンフィグで高度な機能を使える

185　next.jsにおけるレンダリング
csr　これまでのreact(詳細は画像)
ssrサーバーサイドレンダリング
sg静的サイト生成

Next.jsの基本構成
基本的なページはsg
動的に生成する必要があるページはSSR
しかし近年では、SSRが多い　サーバー側のキャッシュを使って効率よく配信できる

187
appフォルダの中はnextでは特別
画面を構成するコードだけを入れる
pagejsとlayoutjsは特別　これらで部品を共通化
not-found.jsもある
上記のような一部のファイル名やフォルダ名は意味を持つ
サブレイアウトファイルをフォルダごとに作れる
公式参照

188
開発者が意識しなくてもssrかsgのどっちかをしてくれる
コードの書き方によって決まる
useEffectを使うことでクライアント側で生成できる
react hooksを使うときはuseclientをつけなあかん

189
use clientは、クライアント側でjsを動かす必要があるかを示す
コードをクライアント側でも実行する　hooksはそれが必要
読み込んだやつも同様
next構築の基本的な考え方
サーバー側でできるやつはそこでする
クライアント側でレンダリングが必要なやつは切り分けて速度を上げる
page.jsとlayout.js以外は名前は自由

190
サーバーコンポーネントの中では副作用がある非同期処理なども普通に使っていい
fetch関数とは、nextで使うときはnext独自のやつになる
第二引数を設定できる　キャッシュするか
設定しなかったらクライアントのnext内部にキャッシュされる　無駄なリクエストが飛ばない
一方で追加が反映されない問題がある
ハードリフレッシュしたらいける　コマンドシフトR

191
ダイナミックルーティング　動的にパスを生成すること
[]のフォルダは動的にパスが変わる
サーバーコンポーネントではawait使えるけどクライアントコンポーネントでは使えない

192
SGを作る方法
export async function generateStaticParams
開発ならこれがなくても問題ないが、本番だと


/** @type {import('next').NextConfig} */
const nextConfig = {
  output: "export",
  trailingSlash: true,
};

export default nextConfig;

195　メタデータの設定方法について学ぼう
とは、サイトのタイトルやディスクリプションタグなど
api routesを使う際はnode.jsが必要

198
Server actions
データ更新用のapi  取得では非推奨

199
useFormState
フォームに登録する
送信時の関数を設定できる
結果はstateに入る
useFormStateとServer actionsを使うと簡単にクライアントとサーバーのやり取りを記述できる

2回目
ネクストの開発では、クライアント側でのみ行いたい処理はuseEffectで囲む　その他hooksはクライアントで動く　ファイルにuse client approuter特有のもの　クライアント側でjsを動かす必要がある場合の目印　ブラウザ上で再実行してくれる
デフォルトはuse server この場合はサーバー側でしか実行されない　clientを設定したらブラウザとサーバー側で2回実行される
サーバーコンポーネントとクライアントコンポーネントと分ける
レンダリングとは、htmlを生成すること
sgはビルド時にhtmlを生成
近年は主にssr サーバーのキャッシュをうまく利用すれば一定の間隔でssrで構築し直すことが可能
pageとlayoutとnotfoundは意味がある　loading errorとかもある
基本的にはnextはsgでできるところはsgで作ってssrの場合にはそれで動く　だから完成したhtmlが帰ってくる
検証モードのhtmlはjsが走ったあと　ページのソースを表示」だとサーバーから帰ってきたhtmlを表示
nextの考え方　サーバーでできることは全てそこでやる　だから、効率を考えてクライアント側で動くべき部分をコンポーネントで分ける
基本的に非同期処理は副作用だからuseeffectの中で使わないといけないが、サーバーコンポーネントの場合は普通に使っていい
nextの中で使うfeact関数はnext独自のもの 第二引数にオプションを支える
基本的にnextはキャッシュを持っているので、ハードリフレッシュしないと普通の再読み込みではdbに変更があっても画面は変わらない　コマンドシフトr リバリデートとかもある
[]のやつは動的にパスが変わる　idという名前じゃなくてもいい
awaitとasyncはサーバーコンポーネントでしか使えない　将来的にはサポートされるかも
sgはビルド時にhtmlを作成し、バックエンド側でnode.jsを使わない
本番ではgeneretestaticpage関数がないと動かない
sgのための設定　output:export()trailingSlash:true cross-env　これらは192に書いている
とりあえず全部ssrで作ってみてもいいかもな
メタデータはlayout.jsで設定できる　ページごとにpage.jsに記述することで変えられる　generateMetadata
api routerやserver actionもある
use formstate