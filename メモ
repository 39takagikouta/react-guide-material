1.25倍でも戻るから等倍でいい
講座聞いても理解力大したことないんだから、これは概要理解で用いる 完璧な理解を目指さずに その後は実技で覚える

最初のやつ
リッチなサイトを比較的簡単に作ることができる
Ui構築のためのjsライブラリ
一番使用されている
スマホやデスクトップアプリの開発にも使える

暗記で書くとバグが出たりパフォーマンスが下がったりする
関数型プログラミングの思想に影響を受けている
思想や概念といった背景を理解し、応用の効く技術を習得する

周辺知識も理解する　よく一緒に使う

体系的に学べば、それほど難しくない　ポリシーを学べばなぜこのように書くかもわかる


1-1
babelがhtmlとかをjsオブジェクトに変更してくれる
dev#appならid
go liveでもいける
エラーのtokenは文字列と思えばいい

-2　コンポーネント
画面の構成要素をリアクトで定義したもの
区切り方も自由
メリット
再利用性の向上　使いまわせる
可読性の向上　整理されるから読みやすい
疎結合になる　コンポーネントが独立しているから、バグ減らせる　テストもしやすい

定義の仕方
関数　最初大文字　jsxのコンポーネントを返す
レンダー関数でjsxとして渡す
babelがjsxをコンポーネントの関数と認識するためには大文字が必要
ただのhtmlだと思ってしまう
関数で定義するjsxを関数コンポーネントという
アロー関数も使える　基本はこっち
returnのjsxが複数業になるときは（）でかこう　returnの特性　勝手にreturnの後に;を入れてくる
{}が使われているのか（）が使われているのかを間違えない　（）はただのグループ化の演算子

-3 create-react-app
雛形 rails newみたいなもんか
コマンドの使い方はscriptsを参照　package.json
どっちを使ってもreactの挙動は変わらない
SWCはビルドが早いが重苦なる　普通のやつでいい
こっちも見方は同じ
vite buildは本番環境用のファイルを作成するコマンド
lintはコードチェック
previewはビルドしたものを画面で確認する
next.jsにも似たようなコマンドがあるらしい

cpackage.jsonがある階層で
npm install
npm start

-4　スタイルを当てる
jsのclassと混在しないようにclassNameを推奨　classでも動く
相対パスの場合は./からインポートする
何も書かなかったらパッケージを探す

-5　コンポーネントの分割
ul>li{item-$} emetの短縮記法
名前付きのエクスポートの仕方
デフォルトエクスポートとはエクスポートするものを指定する　読み込む時に任意の名前をつけられる
基本的に名前は合わせたほうがいいが
そもそも、デフォルトエクスポートは名前もつけなくてもいいが、わかりやすいから基本つける
名前付きもそのままdefaultを関数の時に一緒に定義できるが、基本は別で書く
基本はファイルごとに1コンポーネントなので、デフォルトコンポーネントでいい

後で練習もやる

ー6　不要なタグを出力しないfragment
jsxの要素は一つのルート要素（一番上の要素）で束ねられている必要がある
無駄なdivタグを挟まないためにfragmentを使う　実際にはないものとして表示される

