43イベントリスナ
イベントハンドラ onClick
他にも色々ある
注意点
reactのonChange　値が変わったら発火
jsのonchange入力が送信されたら？発火
reactのonChangeはjsのoninput

45イベントに合わせて画面表示を更新
useStateを使う
これで帰ってくるのは配列
0 値　1値を変更するための関数
だから分割代入を使いがち

46ステートとは
なぜ普通に変数を入れても変わらなかった？
→
1 onChangeを実行してもその部分が再実行されるだけで、変数の部分は再実行されない
コンポーネントの関数自体を再実行しないと
2 例えコンポーネントの関数を再実行しても、変数も再定義してしまうので、代入したデータがなくなる

つまり、コンポーネントを再実行（再レンダリング）してもらい、また変更した値を何処か（state）に保存する必要がある
usestateでこれを実行する
state（状態）とは　コンポーネント（ExampleとかHelloとか、普通のもあるし関数コンポーネントもある）ごとに保持管理される値（react hooksに保存される）

47ステート使用時の注意点
usestateはコンポーネントのトップでしか呼べない
あるいはカスタムフック
関数コンポーネントの外じゃダメ
if文の中とかもダメ　書いたなら反映させなあかん

48更新は即時ではない
再レンダリングじに更新される
更新用関数を複数使用しても意味ない
非同期で処理される、という
関数を引数にして更新用関数を使用したらいける
迷ったら動画の図を参照

49オブジェクト型のステートを扱う際の注意点
オブジェクト型　プリミティブ型以外　配列やオブジェクト
最初じゃなくてもいけてるやんけ
オブジェクトのステートを変更するときはいちいち新しいオブジェクトを設定してやらないとダメ
別のオブジェクトで変更しないといけないから
オブジェクトが長いときはだるいから、スプレッド演算子を使う
...person, name: e.target.valueで上書きできる

55ステートとコンポーネントの関係
react要素ツリー内の位置によってステートを特定している
だから、同じコンポーネントを2個読み込んでも連動はしない
例外の具体例は動画　位置が変わっていなかったらstateを引き継ぐ
場所が同じでも状態を分けたい時はkeyを設定すればいい
keyはコンポーネントを識別するためのもの

56コンポーネント消滅後もstateの状態を管理する
stateをpropsで渡すケース
コンポーネントが消滅する可能性があるとき
複数のstateを複数の子コンポーネントで共有したい時
